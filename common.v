Require Export StructTact.StructTactics.
Require Export VST.floyd.proofauto.
Require Export VST.floyd.library.
Require Export Clight.demo.

Instance CompSpecs : compspecs. make_compspecs prog. Defined.
Definition Vprog : varspecs. mk_varspecs prog. Defined.

(* Define some notation for integers *)
Delimit Scope IntScope with int.
Infix "<" := Int.lt : IntScope.
Notation "0" := Int.zero : IntScope.
Delimit Scope Int64Scope with int64.
Infix "<" := Int64.lt : Int64Scope.

Open Scope int.

Definition S32Min := Int.repr Int.min_signed.
Definition S32Max := Int.repr Int.max_signed.
Definition U32Min := 0.
Definition U32Max := Int.repr Int.max_unsigned.

Definition reg_struct (reg : val) ref_obj_id s32_min_value s32_max_value
           u32_min_value u32_max_value smin_value64 smax_value64
           umin_value64 umax_value64 :=
           (Vint ref_obj_id,
            (Vint s32_min_value,
             (Vint s32_max_value,
              (Vint u32_min_value,
               (Vint u32_max_value,
                (Vlong smin_value64,
                 (Vlong smax_value64,
                  (Vlong umin_value64,
                   Vlong umax_value64)))))))).

Open Scope int64.
Open Scope bool.
(* int64 -> int32 *)

Definition int64_to_32 i := Int.repr (Int64.unsigned i).
Definition int32_to_64 i := Int64.repr (Int.unsigned i).

(* The three functions below are correctly specified and needed for the correctness proof *)

Definition Sbounds s := 
   (int32_to_64 S32Min < s) && (s < int32_to_64 S32Max).

Definition Ubounds s := 
   (int32_to_64 U32Min < s) && (s < int32_to_64 U32Max).

Definition __reg64_bound_s32_spec : (ident * funspec) :=
    DECLARE ___reg64_bound_s32
    WITH a : int64
    PRE [tlong]
      PROP ()
      PARAMS (Vlong a)
      GLOBALS ()
      SEP ()
    POST [tbool]
      PROP ()
      LOCAL (temp ret_temp (Val.of_bool (Sbounds a)))
      SEP ().

Definition __reg64_bound_u32_spec : (ident * funspec) :=
    DECLARE ___reg64_bound_u32
    WITH a : int64
    PRE [tulong]
      PROP ()
      PARAMS (Vlong a)
      GLOBALS ()
      SEP ()
    POST [tbool]
      PROP ()
      LOCAL (temp ret_temp (Val.of_bool (Ubounds a)))
      SEP ().

Definition __mark_reg32_unbounded_spec : (ident * funspec) :=
    DECLARE ___mark_reg32_unbounded
    WITH reg : val,
         ref_obj_id : int,
         s32_min_value : int,
         s32_max_value : int,
         u32_min_value : int,
         u32_max_value : int,
         smin_value64 : int64,
         smax_value64 : int64,
         umin_value64 : int64,
         umax_value64 : int64
    PRE [tptr (Tstruct _bpf_reg_state noattr)]
      PROP ()
      PARAMS (reg)
      GLOBALS ()
      SEP (data_at Tsh (Tstruct _bpf_reg_state noattr)
                   (reg_struct reg ref_obj_id
                               s32_min_value s32_max_value
                               u32_min_value u32_max_value
                               smin_value64 smax_value64
                               umin_value64 umax_value64) reg)
    POST [tvoid]
      PROP ()
      LOCAL ()
      SEP (data_at Tsh (Tstruct _bpf_reg_state noattr)
                   (reg_struct reg ref_obj_id
                               S32Min S32Max
                               U32Min U32Max
                               smin_value64 smax_value64
                               umin_value64 umax_value64) reg).


(* We assume that these functions do nothing *)

Definition __reg_deduce_bounds_spec : (ident * funspec) :=
    DECLARE ___reg_deduce_bounds
    WITH reg : val
    PRE [tptr (Tstruct _bpf_reg_state noattr)]
      PROP ()
      PARAMS (reg)
      GLOBALS ()
      SEP ()
    POST [tvoid]
      PROP ()
      LOCAL ()
      SEP ().

Definition __reg_bound_offset_spec : (ident * funspec) :=
    DECLARE ___reg_bound_offset
    WITH reg : val
    PRE [tptr (Tstruct _bpf_reg_state noattr)]
      PROP ()
      PARAMS (reg)
      GLOBALS ()
      SEP ()
    POST [tvoid]
      PROP ()
      LOCAL ()
      SEP ().

Definition __update_reg_bounds_spec : (ident * funspec) :=
    DECLARE ___update_reg_bounds
    WITH reg : val
    PRE [tptr (Tstruct _bpf_reg_state noattr)]
      PROP ()
      PARAMS (reg)
      GLOBALS ()
      SEP ()
    POST [tvoid]
      PROP ()
      LOCAL ()
      SEP ().

Open Scope int64.

(* This is the main function spec *)

Open Scope bool.


Definition post_reg_struct reg ref_obj_id 
  smin_value64 smax_value64 umin_value64 umax_value64 :=
  (reg_struct reg ref_obj_id
              (if (Sbounds smin_value64 && Sbounds smax_value64) 
               then (int64_to_32 smin_value64)
               else S32Min)
              (if (Sbounds smin_value64 && Sbounds smax_value64) 
               then (int64_to_32 smax_value64)
               else S32Max)
              (if (Ubounds umin_value64 && Ubounds umax_value64) 
               then (int64_to_32 umin_value64)
               else U32Min)
              (if (Ubounds umin_value64 && Ubounds umax_value64) 
               then (int64_to_32 umax_value64)
               else U32Max)
              smin_value64 smax_value64 umin_value64 umax_value64).
  
                                    
Definition __reg_combine_64_into_32_spec : funspec :=
    WITH reg : val,
         ref_obj_id : int,
         s32_min_value : int,
         s32_max_value : int,
         u32_min_value : int,
         u32_max_value : int,
         smin_value64 : int64,
         smax_value64 : int64,
         umin_value64 : int64,
         umax_value64 : int64
    PRE [tptr (Tstruct _bpf_reg_state noattr)]
      PROP ()
      PARAMS (reg)
      GLOBALS ()
      SEP (data_at Tsh (Tstruct _bpf_reg_state noattr)
                   ((reg_struct reg ref_obj_id
                               s32_min_value s32_max_value
                               u32_min_value u32_max_value
                               smin_value64 smax_value64
                               umin_value64 umax_value64)) reg)
    POST [tvoid]
      EX s32_min_value' s32_max_value' u32_min_value' u32_max_value',
      PROP ((s32_min_value' = (int64_to_32 smin_value64) 
             /\ s32_max_value' = (int64_to_32 smax_value64)) 
              \/ (s32_min_value' = S32Min /\ s32_max_value' = S32Max); 
          
            (u32_min_value' = (int64_to_32 umin_value64) 
             /\ u32_max_value' = (int64_to_32 umax_value64)) 
              \/ (u32_min_value' = U32Min /\ u32_max_value' = U32Max))
      LOCAL ()
      SEP (data_at Tsh (Tstruct _bpf_reg_state noattr)
                   (reg_struct reg ref_obj_id
                               s32_min_value' s32_max_value'
                               u32_min_value' u32_max_value'
                               smin_value64 smax_value64
                               umin_value64 umax_value64) reg).

(* Small proof automation step *)
Ltac forward_H H := repeat forward; erewrite H; entailer!.
